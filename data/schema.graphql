"""
The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
"""
directive @defer(
  """
  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
  """
  label: String

  """
  Deferred when true.
  """
  if: Boolean
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
"""
directive @stream(
  """
  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
  """
  label: String

  """
  The initial elements that shall be send down to the consumer.
  """
  initialCount: Int! = 0

  """
  Streamed when true.
  """
  if: Boolean
) on FIELD

"""
The node interface is implemented by entities that have a global unique identifier.
"""
interface Node {
  id: ID!
}

type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  races: [Race!]!
  specificRace(series: String!, season: String, round: String): [Race!]!
  book: Book!
}

type Race implements Node {
  id: ID!
  results: [Result!]!
  series: String
  season: String
  round: String
  url: String
  raceName: String
  circuit: Circuit
  date: String
}

type Result {
  number: String
  position: String
  positionText: String
  points: String
  driver: Driver
  grid: String
  laps: String
  status: String
  time: Time
  fastestLap: FastestLap
}

type Circuit {
  circuitId: String
  url: String
  circuitName: String
  location: Location
}

type FastestLap {
  rank: String!
  lap: String!
  time: Time!
  averageSpeed: AverageSpeed!
}

type Time {
  millis: String!
  time: String!
}

type Driver {
  driverId: String
  permanentNumber: String
  code: String
  url: String
  givenName: String
  familyName: String
  dateOfBirth: String
  nationality: String
}

type Book {
  title: String!
  author: Author!
}

type Location {
  lat: String
  long: String
  locality: String
  country: String
}

type Author {
  name: String!
}

type AverageSpeed {
  units: String!
  speed: String!
}
